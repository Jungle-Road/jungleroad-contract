/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CreatureAccessoryFactoryInterface extends utils.Interface {
  functions: {
    "BASIC_LOOTBOX()": FunctionFragment;
    "GOLD_LOOTBOX()": FunctionFragment;
    "NUM_LOOTBOX_OPTIONS()": FunctionFragment;
    "NUM_OPTIONS()": FunctionFragment;
    "PREMIUM_LOOTBOX()": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "canMint(uint256,uint256)": FunctionFragment;
    "factorySchemaName()": FunctionFragment;
    "lootBoxAddress()": FunctionFragment;
    "mint(uint256,address,uint256,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "numOptions()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxyRegistryAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "supportsFactoryInterface()": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASIC_LOOTBOX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOLD_LOOTBOX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NUM_LOOTBOX_OPTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NUM_OPTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PREMIUM_LOOTBOX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canMint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "factorySchemaName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lootBoxAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numOptions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyRegistryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsFactoryInterface",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "BASIC_LOOTBOX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOLD_LOOTBOX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NUM_LOOTBOX_OPTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NUM_OPTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PREMIUM_LOOTBOX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "factorySchemaName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lootBoxAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numOptions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsFactoryInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CreatureAccessoryFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreatureAccessoryFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIC_LOOTBOX(overrides?: CallOverrides): Promise<[BigNumber]>;

    GOLD_LOOTBOX(overrides?: CallOverrides): Promise<[BigNumber]>;

    NUM_LOOTBOX_OPTIONS(overrides?: CallOverrides): Promise<[BigNumber]>;

    NUM_OPTIONS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PREMIUM_LOOTBOX(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      _owner: string,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canMint(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    factorySchemaName(overrides?: CallOverrides): Promise<[string]>;

    lootBoxAddress(overrides?: CallOverrides): Promise<[string]>;

    mint(
      _optionId: BigNumberish,
      _toAddress: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    numOptions(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxyRegistryAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsFactoryInterface(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(_optionId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  BASIC_LOOTBOX(overrides?: CallOverrides): Promise<BigNumber>;

  GOLD_LOOTBOX(overrides?: CallOverrides): Promise<BigNumber>;

  NUM_LOOTBOX_OPTIONS(overrides?: CallOverrides): Promise<BigNumber>;

  NUM_OPTIONS(overrides?: CallOverrides): Promise<BigNumber>;

  PREMIUM_LOOTBOX(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    _owner: string,
    _optionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canMint(
    _optionId: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  factorySchemaName(overrides?: CallOverrides): Promise<string>;

  lootBoxAddress(overrides?: CallOverrides): Promise<string>;

  mint(
    _optionId: BigNumberish,
    _toAddress: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  numOptions(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxyRegistryAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsFactoryInterface(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(_optionId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASIC_LOOTBOX(overrides?: CallOverrides): Promise<BigNumber>;

    GOLD_LOOTBOX(overrides?: CallOverrides): Promise<BigNumber>;

    NUM_LOOTBOX_OPTIONS(overrides?: CallOverrides): Promise<BigNumber>;

    NUM_OPTIONS(overrides?: CallOverrides): Promise<BigNumber>;

    PREMIUM_LOOTBOX(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      _owner: string,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canMint(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factorySchemaName(overrides?: CallOverrides): Promise<string>;

    lootBoxAddress(overrides?: CallOverrides): Promise<string>;

    mint(
      _optionId: BigNumberish,
      _toAddress: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    numOptions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxyRegistryAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    supportsFactoryInterface(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(_optionId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BASIC_LOOTBOX(overrides?: CallOverrides): Promise<BigNumber>;

    GOLD_LOOTBOX(overrides?: CallOverrides): Promise<BigNumber>;

    NUM_LOOTBOX_OPTIONS(overrides?: CallOverrides): Promise<BigNumber>;

    NUM_OPTIONS(overrides?: CallOverrides): Promise<BigNumber>;

    PREMIUM_LOOTBOX(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      _owner: string,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canMint(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factorySchemaName(overrides?: CallOverrides): Promise<BigNumber>;

    lootBoxAddress(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _optionId: BigNumberish,
      _toAddress: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    numOptions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxyRegistryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsFactoryInterface(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(_optionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIC_LOOTBOX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOLD_LOOTBOX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NUM_LOOTBOX_OPTIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NUM_OPTIONS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PREMIUM_LOOTBOX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canMint(
      _optionId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factorySchemaName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lootBoxAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _optionId: BigNumberish,
      _toAddress: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numOptions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyRegistryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsFactoryInterface(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
